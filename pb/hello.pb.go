// Code generated by protoc-gen-go. DO NOT EDIT.
// source: addition.proto

package hello

import (
	"context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	"google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MyTarget struct {
	Target               string   `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MyTarget) Reset()         { *m = MyTarget{} }
func (m *MyTarget) String() string { return proto.CompactTextString(m) }
func (*MyTarget) ProtoMessage()    {}
func (*MyTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9e7dbd1dd38dde4, []int{0}
}

func (m *MyTarget) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MyTarget.Unmarshal(m, b)
}
func (m *MyTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MyTarget.Marshal(b, m, deterministic)
}
func (m *MyTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyTarget.Merge(m, src)
}
func (m *MyTarget) XXX_Size() int {
	return xxx_messageInfo_MyTarget.Size(m)
}
func (m *MyTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_MyTarget.DiscardUnknown(m)
}

var xxx_messageInfo_MyTarget proto.InternalMessageInfo

func (m *MyTarget) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

type MyGreeting struct {
	Greeting             string   `protobuf:"bytes,1,opt,name=greeting,proto3" json:"greeting,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MyGreeting) Reset()         { *m = MyGreeting{} }
func (m *MyGreeting) String() string { return proto.CompactTextString(m) }
func (*MyGreeting) ProtoMessage()    {}
func (*MyGreeting) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9e7dbd1dd38dde4, []int{1}
}

func (m *MyGreeting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MyGreeting.Unmarshal(m, b)
}
func (m *MyGreeting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MyGreeting.Marshal(b, m, deterministic)
}
func (m *MyGreeting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyGreeting.Merge(m, src)
}
func (m *MyGreeting) XXX_Size() int {
	return xxx_messageInfo_MyGreeting.Size(m)
}
func (m *MyGreeting) XXX_DiscardUnknown() {
	xxx_messageInfo_MyGreeting.DiscardUnknown(m)
}

var xxx_messageInfo_MyGreeting proto.InternalMessageInfo

func (m *MyGreeting) GetGreeting() string {
	if m != nil {
		return m.Greeting
	}
	return ""
}

func init() {
	proto.RegisterType((*MyTarget)(nil), "hello.MyTarget")
	proto.RegisterType((*MyGreeting)(nil), "hello.MyGreeting")
}

func init() { proto.RegisterFile("addition.proto", fileDescriptor_a9e7dbd1dd38dde4) }

var fileDescriptor_a9e7dbd1dd38dde4 = []byte{
	// 135 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x4c, 0x49, 0xc9,
	0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcd, 0x48, 0xcd, 0xc9,
	0xc9, 0x57, 0x52, 0xe2, 0xe2, 0xf0, 0xad, 0x0c, 0x49, 0x2c, 0x4a, 0x4f, 0x2d, 0x11, 0x12, 0xe3,
	0x62, 0x2b, 0x01, 0xb3, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xa0, 0x3c, 0x25, 0x0d, 0x2e,
	0x2e, 0xdf, 0x4a, 0xf7, 0xa2, 0xd4, 0xd4, 0x92, 0xcc, 0xbc, 0x74, 0x21, 0x29, 0x2e, 0x8e, 0x74,
	0x28, 0x1b, 0xaa, 0x0e, 0xce, 0x37, 0xb2, 0xe4, 0x62, 0xf5, 0x00, 0x19, 0x2b, 0x64, 0xc0, 0xc5,
	0x11, 0x9c, 0x58, 0x09, 0x61, 0xf3, 0xeb, 0x81, 0xad, 0xd2, 0x83, 0xd9, 0x23, 0x25, 0x08, 0x17,
	0x80, 0x19, 0xaa, 0xc4, 0x90, 0xc4, 0x06, 0x76, 0x96, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xec,
	0x2a, 0x0c, 0x52, 0xa8, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Let's create the identity management client interface
// These represent the gRPC procedures that we had in the sever.

type HelloClient interface {
	SayHello(ctx context.Context, in *MyTarget, opts ...grpc.CallOption) (*MyGreeting, error)
}

type simpleHelloClient struct {
	connection *grpc.ClientConn
}

func NewSimpleHelloClient(connection *grpc.ClientConn) HelloClient {
	return &simpleHelloClient{connection}
}

func (simpleClient *simpleHelloClient) SayHello(ctx context.Context, in *MyTarget, opts ...grpc.CallOption) (*MyGreeting, error) {
	out := new(MyGreeting)
	err := simpleClient.connection.Invoke(ctx, "/hello.Hello/SayHello", in, out, opts...)

	if err != nil {
		return nil, err
	}

	return out, nil
}

// Let's create the identity management server interface
// These represent the gRPC procedures that we had in the sever.

type HelloServer interface {
	SayHello(context.Context, *MyTarget) (*MyGreeting, error)
}

func RegisterHelloServer(s *grpc.Server, srv HelloServer) {
	s.RegisterService(&_Hello_serviceDesc, srv)
}

func _Hello_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyTarget)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.Hello/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).SayHello(ctx, req.(*MyTarget))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hello_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hello.Hello",
	HandlerType: (*HelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Hello_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/identity.proto",
}
